@page "/login"
@rendermode InteractiveServer
@inject AuthnService AuthService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject WebAuthnService WebAuthService
@inject IJSRuntime JSRuntime

<PageTitle>Login</PageTitle>

@if (!WebAuthnSupported)
{
  <div class="alert alert-danger">
    Please note: Your browser does not seem to support WebAuthn yet. <a href="https://caniuse.com/#search=webauthn" target="_blank">Supported browsers</a>
  </div>
}

<h3>Login</h3>

<p>Enter your username to log in with your passkey:</p>

<div>
  <InputText required @bind-Value="username" placeholder="Enter username" />
  <button disabled="@(!LoginFormValid())" @onclick="StartLogin">Login</button>
</div>

<p>@statusMessage</p>

@code {
  private string username = string.Empty;
  private string statusMessage = string.Empty;
  private bool WebAuthnSupported;

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      await WebAuthService.Init();
      WebAuthnSupported = await WebAuthService.IsWebAuthnSupportedAsync();
      StateHasChanged(); // Trigger re-render to update UI
    }
  }

  private bool LoginFormValid() => !string.IsNullOrWhiteSpace(username);

  private async Task StartLogin()
  {
    try
    {
      statusMessage = "Starting login...";

      // Start login
      var options = await AuthService.StartLoginAsync(username);

      // Call WebAuthn API to get an assertion
      var assertion = await WebAuthService.GetAssertionAsync(options);

      // Verify the assertion
      var response = await AuthService.VerifyLoginAsync(assertion);

      statusMessage = response.IsSuccessStatusCode ? "Login successful!" : $"Login failed: {response.ReasonPhrase} [{await response.Content.ReadAsStringAsync()}]";

      if (response.IsSuccessStatusCode)
      {
        ((AuthStateProvider)AuthenticationStateProvider).AuthenticateUser(username);
        NavigationManager.NavigateTo("/");
        return;
      }
    }
    catch (Exception ex)
    {
      statusMessage = $"Error: {ex.Message}";
    }
  }
}
