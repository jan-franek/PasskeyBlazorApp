@page "/login"
@rendermode InteractiveServer
@inject AuthService AuthService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Login</PageTitle>

<h3>Login</h3>

<p>Enter your username to log in with your passkey:</p>

<div>
  <InputText required @bind-Value="username" placeholder="Enter username" />
  <button disabled="@(!LoginFormValid())" @onclick="StartLogin">Login</button>
</div>

<p>@statusMessage</p>

@code {
  private string username = string.Empty;
  private string statusMessage = string.Empty;

  private bool LoginFormValid() => !string.IsNullOrWhiteSpace(username);

  private async Task StartLogin()
  {
    try
    {
      // Validate username input
      if (string.IsNullOrWhiteSpace(username))
      {
        statusMessage = "Username is required.";
        return;
      }

      statusMessage = "Starting login...";

      // Start login
      var options = await AuthService.StartLoginAsync(username);

      // Call WebAuthn API to get an assertion
      var assertion = await JSRuntime.InvokeAsync<object>("getAssertion", options);

      // Verify the assertion
      var response = await AuthService.VerifyLoginAsync(assertion);

      statusMessage = response.IsSuccessStatusCode ? "Login successful!" : $"Login failed: {response.ReasonPhrase} [{response.Content.ReadAsStringAsync().Result}]";

      if (response.IsSuccessStatusCode)
      {
        ((AuthStateProvider)AuthenticationStateProvider).AuthenticateUser(username);
        NavigationManager.NavigateTo("/");
        return;
      }
    }
    catch (Exception ex)
    {
      statusMessage = $"Error: {ex.Message}";
    }
  }
}
