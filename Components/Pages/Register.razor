@page "/register"
@rendermode InteractiveServer
@inject AuthnService AuthService
@inject WebAuthnService WebAuthService
@inject IJSRuntime JSRuntime

<PageTitle>Registration</PageTitle>

@if (!WebAuthnSupported)
{
  <div class="alert alert-danger">
    Please note: Your browser does not seem to support WebAuthn yet. <a href="https://caniuse.com/#search=webauthn" target="_blank">Supported browsers</a>
  </div>
}

<h3>Register</h3>

<p>Enter a username to register a passkey:</p>

<div>
  <InputText required @bind-Value="username" placeholder="Enter username" />
  <button disabled="@(!RegisterFormValid())" @onclick="StartRegistration">Register</button>
</div>

<p>@statusMessage</p>

@code {
  private string username = string.Empty;
  private string statusMessage = string.Empty;
  private bool WebAuthnSupported = true;

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      await WebAuthService.Init();
      WebAuthnSupported = await WebAuthService.IsWebAuthnSupportedAsync();
      StateHasChanged(); // Trigger re-render to update UI
    }
  }

  private bool RegisterFormValid() => !string.IsNullOrWhiteSpace(username);

  private async Task StartRegistration()
  {
    try
    {
      statusMessage = "Starting registration...";

      // Start registration
      var options = await AuthService.StartRegistrationAsync(username);

      // Call WebAuthn API to create a credential
      var credential = await WebAuthService.CreateCredentialAsync(options);

      // Verify the credential
      var response = await AuthService.VerifyRegistrationAsync(credential);

      statusMessage = response.IsSuccessStatusCode ? "Registration successful!" : $"Registration failed: {response.ReasonPhrase} [{response.Content.ReadAsStringAsync().Result}]";
    }
    catch (Exception ex)
    {
      statusMessage = $"Error: {ex.Message}";
    }
  }
}